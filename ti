{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f189c7a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T20:01:37.106920Z",
     "iopub.status.busy": "2025-03-31T20:01:37.106414Z",
     "iopub.status.idle": "2025-03-31T20:01:42.226321Z",
     "shell.execute_reply": "2025-03-31T20:01:42.224909Z"
    },
    "papermill": {
     "duration": 5.125247,
     "end_time": "2025-03-31T20:01:42.228346",
     "exception": false,
     "start_time": "2025-03-31T20:01:37.103099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 6 columns):\n",
      " #   Column                                Non-Null Count  Dtype  \n",
      "---  ------                                --------------  -----  \n",
      " 0   Crop                                  156 non-null    object \n",
      " 1   Precipitation (mm day-1)              156 non-null    float64\n",
      " 2   Specific Humidity at 2 Meters (g/kg)  156 non-null    float64\n",
      " 3   Relative Humidity at 2 Meters (%)     156 non-null    float64\n",
      " 4   Temperature at 2 Meters (C)           156 non-null    float64\n",
      " 5   Yield                                 156 non-null    int64  \n",
      "dtypes: float64(4), int64(1), object(1)\n",
      "memory usage: 7.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Crop</th>\n",
       "      <th>Precipitation (mm day-1)</th>\n",
       "      <th>Specific Humidity at 2 Meters (g/kg)</th>\n",
       "      <th>Relative Humidity at 2 Meters (%)</th>\n",
       "      <th>Temperature at 2 Meters (C)</th>\n",
       "      <th>Yield</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Cocoa, beans</td>\n",
       "      <td>2248.92</td>\n",
       "      <td>17.72</td>\n",
       "      <td>83.40</td>\n",
       "      <td>26.01</td>\n",
       "      <td>11560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cocoa, beans</td>\n",
       "      <td>1938.42</td>\n",
       "      <td>17.54</td>\n",
       "      <td>82.11</td>\n",
       "      <td>26.11</td>\n",
       "      <td>11253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Cocoa, beans</td>\n",
       "      <td>2301.54</td>\n",
       "      <td>17.81</td>\n",
       "      <td>82.79</td>\n",
       "      <td>26.24</td>\n",
       "      <td>9456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cocoa, beans</td>\n",
       "      <td>2592.35</td>\n",
       "      <td>17.61</td>\n",
       "      <td>85.07</td>\n",
       "      <td>25.56</td>\n",
       "      <td>9321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cocoa, beans</td>\n",
       "      <td>2344.72</td>\n",
       "      <td>17.61</td>\n",
       "      <td>84.12</td>\n",
       "      <td>25.76</td>\n",
       "      <td>8800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>Rubber, natural</td>\n",
       "      <td>2308.51</td>\n",
       "      <td>18.27</td>\n",
       "      <td>83.65</td>\n",
       "      <td>26.47</td>\n",
       "      <td>6721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>Rubber, natural</td>\n",
       "      <td>2410.13</td>\n",
       "      <td>18.58</td>\n",
       "      <td>83.45</td>\n",
       "      <td>26.81</td>\n",
       "      <td>6248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>Rubber, natural</td>\n",
       "      <td>2967.41</td>\n",
       "      <td>18.67</td>\n",
       "      <td>85.48</td>\n",
       "      <td>26.46</td>\n",
       "      <td>6842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>Rubber, natural</td>\n",
       "      <td>2333.46</td>\n",
       "      <td>18.50</td>\n",
       "      <td>84.85</td>\n",
       "      <td>26.43</td>\n",
       "      <td>5571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>Rubber, natural</td>\n",
       "      <td>2109.34</td>\n",
       "      <td>18.51</td>\n",
       "      <td>83.52</td>\n",
       "      <td>26.72</td>\n",
       "      <td>5903</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Crop  Precipitation (mm day-1)  \\\n",
       "0       Cocoa, beans                   2248.92   \n",
       "1       Cocoa, beans                   1938.42   \n",
       "2       Cocoa, beans                   2301.54   \n",
       "3       Cocoa, beans                   2592.35   \n",
       "4       Cocoa, beans                   2344.72   \n",
       "..               ...                       ...   \n",
       "151  Rubber, natural                   2308.51   \n",
       "152  Rubber, natural                   2410.13   \n",
       "153  Rubber, natural                   2967.41   \n",
       "154  Rubber, natural                   2333.46   \n",
       "155  Rubber, natural                   2109.34   \n",
       "\n",
       "     Specific Humidity at 2 Meters (g/kg)  Relative Humidity at 2 Meters (%)  \\\n",
       "0                                   17.72                              83.40   \n",
       "1                                   17.54                              82.11   \n",
       "2                                   17.81                              82.79   \n",
       "3                                   17.61                              85.07   \n",
       "4                                   17.61                              84.12   \n",
       "..                                    ...                                ...   \n",
       "151                                 18.27                              83.65   \n",
       "152                                 18.58                              83.45   \n",
       "153                                 18.67                              85.48   \n",
       "154                                 18.50                              84.85   \n",
       "155                                 18.51                              83.52   \n",
       "\n",
       "     Temperature at 2 Meters (C)  Yield  \n",
       "0                          26.01  11560  \n",
       "1                          26.11  11253  \n",
       "2                          26.24   9456  \n",
       "3                          25.56   9321  \n",
       "4                          25.76   8800  \n",
       "..                           ...    ...  \n",
       "151                        26.47   6721  \n",
       "152                        26.81   6248  \n",
       "153                        26.46   6842  \n",
       "154                        26.43   5571  \n",
       "155                        26.72   5903  \n",
       "\n",
       "[156 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.959e+11, tolerance: 6.415e+07\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           MAE           MSE  R2 Score\n",
      "Random Forest      2655.941250  2.022256e+07  0.994787\n",
      "XGBoost            3012.815891  2.585032e+07  0.993336\n",
      "Lasso Regression  53465.193516  4.176763e+09 -0.076771\n",
      "Decision Tree      2456.977497  1.776349e+07  0.995421\n",
      "KNN               65688.112500  5.660640e+09 -0.459315\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "\n",
    "file_path = \"/kaggle/input/crop-yelied/crop yield prediction.csv\" \n",
    "df = pd.read_csv(file_path)\n",
    "display(df.info())\n",
    "display(df.head(157))\n",
    "label_encoder = LabelEncoder()\n",
    "df[\"Crop\"] = label_encoder.fit_transform(df[\"Crop\"])\n",
    "X = df.drop(columns=[\"Yield\"])\n",
    "y = df[\"Yield\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "models = {\n",
    "    \"Random Forest\": RandomForestRegressor(n_estimators=50, random_state=42),\n",
    "    \"XGBoost\": XGBRegressor(n_estimators=50, max_depth=3, random_state=42, verbosity=0),\n",
    "    \"Lasso Regression\": Lasso(alpha=0.1),\n",
    "    \"Decision Tree\": DecisionTreeRegressor(max_depth=5, random_state=42),\n",
    "    \"KNN\": KNeighborsRegressor(n_neighbors=5)\n",
    "}\n",
    "\n",
    "results = {}\n",
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    results[name] = {\"MAE\": mae, \"MSE\": mse, \"R2 Score\": r2}\n",
    "results_df = pd.DataFrame(results).T\n",
    "print(results_df)\n",
    "plt.figure(figsize=(10, 5))\n",
    "sns.barplot(x=results_df.index, y=results_df[\"R2 Score\"])\n",
    "plt.title(\"Model Performance Comparison (RÂ² Score)\")\n",
    "plt.ylabel(\"RÂ² Score\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7014791,
     "sourceId": 11230385,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.898853,
   "end_time": "2025-03-31T20:01:43.052905",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-31T20:01:34.154052",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
